Проверка состояния:
git status # проверка добавления файлов в индекс перед коммитом
git checkout dev-master# переключение на ветку dev-master
git log # история коммитов
git log --oneline # сокращенная запись лога коммитов
git reflog # все действия по коммитам

Добавление в индекс:
git add file.txt # добавить в индекс перед коммитом
git add . # добавить в индекс все файлы из текуще директории перед коммитом
git reset file.txt # отменить добавление файла (ждо выполнения коммита)

Коммит:
git commit # сделать коммит, откроется текстовый редактор, для сохранения ввести :wq и enter
git commit -m 'comment' # сделать коммит сразу с комментом

Отмена коммитов:
git reset 3c59df5 # возврат к коммиту (3c59df5 - хэш коммита)
git revert a4792e3 # удаление коммита и всех его последующих следов (a4792e3 - хэш коммита)
git reset --hard # сбросить состояние до применения последнего коммита

Создание веток:
git branch # укажет список веток и звездочкой отметит текущую
git checkout -b dev-test # dev-test это название новой ветки, если ее нет, она создастся и переключит на нее
git checkout -b dev-test dev2# то же самое, но ветка идет из dev2

Клонирование репозитория:
git clone git@github.com:pikulevlv/project-git-course-.git project # в меню clone or download переключиться на ssh
		# и скопировать ссылку.Последнее выражение project - это название папки, куда клонируем

Удаленное подключение:
git remote -v

Отправка на удаленный сервер (github):
git push  # грузит все изменения с нашего лок репозитория на удаленный
git push --set-upstream origin dev # если на гите нет ветки dev, то такая команда (dev - имя новой ветки)
git push -u origin dev # более краткая версия предыдущей команды
git push --force # когда мы переносим ветку в локальном репозитории, а потом отправляем на удаленный,
		# то нужно ему сообщить, чтобы тоже перезаписал ветку (делаем все из ветки, которую перемещаем)
git push --tags # отправить только теги


Загрузка из удаленного репозитория:
git pull # скачивает все обновления ветки, на которой мы находимся
git fetch # подгрузить обновления (вдруг кто-то создал) в лок репозиторий с удаленного репозитория

Запросы на слияние (pull-request):
идем в браузер и в разделе Pull requests нажимаем кнопку Compare & pull request

Слияние веток:
git merge dev # где dev - ветка, которая должна влиться в ветку, на которой мы находимся

Перенос веток:
git rebase master # ветку, на которой стоим, перенести на последний коммит ветки мастер

Удаление веток:
git branch -d <имя_ветки>
git branch -d dev dev-kraken # удалить ветки dev и dev-kraken. При этом после того как сделаем git push
			# с гита не удалятся эти ветки
git push --delete origin dev dev-kraken # для удаления и с гита тоже, где origin - наш локальный репозиторий, dev и dev-kraken - ветки, подлежащие удалению

Установка/удаление тега (номер версии):
git tag 1.1.0 # где 1.1.0 - любой номер 
git tag # проверка тега (версии)
git tag --list # проверка всех тегов
git tag -d 1.1.0.1 # удалить тег
git push --tags # отправить только теги
git push --delete origin 1.0.1 # удалить на удаленном сервере (гит) тег

Перемещать несохраненные данные с одной ветки на другую без записи в рамках одного коммита
GIT stash - пространство на нашем локальном компе.
Если не готов отправлятьфайл в staged и коммитить, но хочется иметь этот файл при работе в другой ветке,
нужно временное хранилище:
git stash # выгрузит все изменения во временное хранилище (WIP - work in progress).
git stash list # список stash
git stash push filename.txt # добавить в stash новый файл
git stash pop stash@{0} # применить нужный стеш на текущую ветку, stash@{0} -  номер нужного стеша

Объединение (склеивание) нескольких коммитов в один (git squash):
git merge squash-dev --squash # делаем из ветки, в которую будут влиты коммиты с другой ветки
				# все изменения последовательно из взятых коммитов применяются 
git rebase -i HEAD~3 # склеить 3 последние коммита от HEAD в один. Откроется редактор, в котором
		# самому первому коммиту оставить pick, остальным проставить f
		# в терминале работаю сочетания esc, :, w, q

Перенос отдельных коммитов cherry-pick (взять произвольный коммит и записать в другой ветке):
git cherry-pick 144ddb3 # перенести коммит с хешем 144ddb3 из другой ветки в текущую ветку
git cherry-pick dev # перенести последний коммит с ветки dev в текущую ветку
git cherry-pick ..dev # перенести все коммиты с ветки dev в текущую ветку

Перезапись коммита (ammend):
git commit --amend # вначале исправить изменения и этой командой перезаписать последний коммит
		# в открывшемся редакторе просто ввести :wq и сообщение предыдущего коммита сохранится
		# у исправленного коммита изменится хеш

Удаление ранее добавленного файла из ветки и удаление с гит:
git rm filename.txt --> git commit -m 'comment' --> git push --force

Команды git bash:
cd folder/ # перейти в папку folder
cd .. / # выйти на уровень выше
cd ~ # выйти в домашнюю директорию
ls # показать список файлов
ls -a # показать список файлов включая скрытые
touch filename.txt # создать файл (можно сразу несколько перечислить через пробел)
nano filename.txt # открыть файл в редакторе nano
cat filename.txt # просмотреть файл
echo 'comment' > filename.txt # записать что-то сразу в файл (он грубо перезапишется!)
rm filename.txt # удалить файл
mv filename.txt filename.md # переименовать файл-источник filename.txt в файл-приемник filename.md

Генерация ssh-ключа:
ssh-keygen # несколько раз enter. 
	# Далее вывести содержимое файла (с расширением .pub), который был сгенерирован 
	# где-то по адресу c/Users/lpikulev/.ssh/id_rsa

Запись комментария и выход:
i
вводим коммент
жмем escape
вводим
:wq
